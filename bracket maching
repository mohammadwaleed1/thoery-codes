#include <iostream>
#include <string>
using namespace std;

class Stack {
    char arr[100];
    int top;
public:
    Stack() { top = -1; }

    void push(char c) {
        arr[++top] = c;
    }

    char pop() {
        if (top == -1) return '\0';
        return arr[top--];
    }

    bool isEmpty() {
        return top == -1;
    }
};

int main() {
    string exp;
    cout << "Enter expression: ";
    getline(cin, exp);

    Stack st;
    bool balanced = true;

    for (int i = 0; i < exp.length(); i++) {
        char ch = exp[i];

        // push opening brackets
        if (ch == '(' || ch == '{' || ch == '[')
            st.push(ch);

        // check closing brackets
        else if (ch == ')' || ch == '}' || ch == ']') {
            if (st.isEmpty()) { // nothing to match
                balanced = false;
                break;
            }

            char top = st.pop();

            // check correct pair
            if ((ch == ')' && top != '(') ||(ch == '}' && top != '{') || (ch == ']' && top != '[')) {
                balanced = false;
                break;
            }
        }
    }

    // if stack not empty => too many openings
    if (!st.isEmpty())
        balanced = false;

    if (balanced)
        cout << "Brackets are Balanced ✅" << endl;
    else
        cout << "Brackets are NOT Balanced ❌" << endl;

    return 0;
}
