#include <iostream>
#include <string>
using namespace std;

class Stack {
    string arr[50];
    int top;

public:
    Stack() { top = -1; }

    void push(string x) {
        arr[++top] = x;
    }

    string pop() {
        return arr[top--];
    }

    string peek() {
        return arr[top];
    }

    bool isEmpty() {
        return top == -1;
    }
};

bool isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

string postfixToInfix(string postfix) {
    Stack st;

    for (int i = 0; i < postfix.length(); i++) {
        char ch = postfix[i];

        // 1️⃣ If operand → push as string
        if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')) {
            string op(1, ch);
            st.push(op);
        }

        // 2️⃣ If operator → pop two operands and combine
        else if (isOperator(ch)) {
            string op1 = st.pop(); // right operand
            string op2 = st.pop(); // left operand
            string exp = "(" + op2 + ch + op1 + ")";
            st.push(exp);
        }
    }

    // Final expression on stack top
    return st.pop();
}

int main() {
    string postfix = "ABC*+D-";

    cout << "Postfix: " << postfix << endl;
    cout << "Infix: " << postfixToInfix(postfix) << endl;

    // Example 2
    string postfix2 = "AB+C*D-";
    cout << "\nPostfix: " << postfix2 << endl;
    cout << "Infix: " << postfixToInfix(postfix2) << endl;

    return 0;
}
