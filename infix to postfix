#include <iostream>
using namespace std;

class Stack {
    char arr[50];
    int top;

public:
    Stack() { top = -1; }

    void push(char x) {
        arr[++top] = x;
    }

    char pop() {
        return arr[top--];
    }

    char peek() {
        return arr[top];
    }

    bool isEmpty() {
        return top == -1;
    }
};

// Function to check precedence of operators
int precedence(char c) {
    if (c == '^') return 3;
    else if (c == '*' || c == '/') return 2;
    else if (c == '+' || c == '-') return 1;
    else return 0;
}

string infixToPostfix(string infix) {
    Stack st;
    string postfix = "";

    for (int i = 0; i < infix.length(); i++) {
        char ch = infix[i];

        // 1️⃣ If it's an operand (A-Z, a-z, 0-9) → directly add
        if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')) {
            postfix += ch;
        }

        // 2️⃣ If it's '(' → push to stack
        else if (ch == '(') {
            st.push(ch);
        }

        // 3️⃣ If it's ')' → pop until '(' is found
        else if (ch == ')') {
            while (!st.isEmpty() && st.peek() != '(') {
                postfix += st.pop();
            }
            st.pop(); // remove '('
        }

        // 4️⃣ If it's an operator
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^') {
            // Pop higher or equal precedence operators first
            while (!st.isEmpty() && precedence(st.peek()) >= precedence(ch)) {
                postfix += st.pop();
            }

            // Now push current operator
            st.push(ch);
        }
    }

    // 5️⃣ Pop remaining operators
    while (!st.isEmpty()) {
        postfix += st.pop();
    }

    return postfix;
}

int main() {
    string infix = "A+B*C-D";
    cout << "Infix: " << infix << endl;
    cout << "Postfix: " << infixToPostfix(infix) << endl;

    // Try with parentheses too:
    string infix2 = "(A+B)*C-D";
    cout << "\nInfix: " << infix2 << endl;
    cout << "Postfix: " << infixToPostfix(infix2) << endl;

    return 0;
}
